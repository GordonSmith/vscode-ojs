// Generated by vscode-ojs: Observable Notebook Kit compiled definitions

function cell_1(md) {

  return (
    md`# Reactive Demo

_Quick demo with gang data_

---`
  )

}
function cell_2(Plot, data, setStartEnd, d3) {

  return (
    Plot.plot({
      x: { label: null },
      y: { percent: true },
      marks: [
        Plot.barY(data, { x: "letter", y: "frequency", fillOpacity: 0.2 }),
        Plot.tickY(data, { x: "letter", y: "frequency" }),
        Plot.ruleY([0]),
        (index, scales, channels, dimensions, context) => {
          const x1 = dimensions.marginLeft;
          const x2 = dimensions.width - dimensions.marginRight;
          const y1 = 0;
          const y2 = dimensions.height;
          const brushed = (event) => setStartEnd(event.selection?.map(scales.x.invert));
          const brush = d3.brushX().extent([[x1, y1], [x2, y2]]).on("brush end", brushed);
          return d3.create("svg:g").call(brush).node();
        }
      ]
    })
  )

}
function cell_3(Mutable) {

  const startEnd = Mutable(null);
  const setStartEnd = (se) => startEnd.value = se;
  return { startEnd, setStartEnd };

}
function cell_4(FileAttachment, display) {

  const data = FileAttachment("./data/alphabet.csv").csv({ typed: true }).then(display);
  return { data };

}
function cell_5(phonesTimeLineData, display) {

  const calls = Object.keys(phonesTimeLineData.events).map((key) => {
    const row = phonesTimeLineData.events[key];
    const caller = phonesTimeLineData.entities[row.entityIds[0]];
    return {
      id: key,
      caller: phonesTimeLineData.entities[row.entityIds[0]],
      caller_type: caller.type,
      recipient: phonesTimeLineData.entities[row.entityIds[1]],
      start: new Date(row.time.start),
      end: new Date(row.time.end)
    };
  });
  display(calls);
  const callRange = {
    start: new Date(Math.min(...calls.map(c => c.start))),
    end: new Date(Math.max(...calls.map(c => c.end)))
  };
  display(callRange);
  return { calls, callRange };

}
async function cell_6(display) {

  const { test } = await import("./lib.js").then((module) => {
    if (!("test" in module)) throw new SyntaxError(`export 'test' not found`);
    return module;
  });

  const xxx = test();
  display(xxx);
  return { test, xxx };

}
function cell_7(md) {

  return (
    md`---
## Phones timeline`
  )

}
async function cell_8(FileAttachment, display) {

  const phonesTimeLineData = await FileAttachment("./data/phonesTimeLineData.json").json();
  display(phonesTimeLineData);
  return { phonesTimeLineData };

}
function cell_9(md, callRange) {

  return (
    md`## Zoomable Timeline of Calls (${callRange.start.toLocaleDateString()} - ${callRange.end.toLocaleDateString()})`
  )

}
function cell_10(chart) {
  return (
    chart.element
  )
}
async function cell_11(FileAttachment, display) {

  const timeBarData = await FileAttachment("./data/timeBarData.json").json();
  display(timeBarData);
  return { timeBarData };

}
function cell_12(calls, margin) {

  function renderCalls(rootNode, scaleX) {
    const callUpdate = rootNode.selectAll(".call").data(calls);
    const callEnter = callUpdate.enter().append("line")
      .attr("class", "call")

      .attr("stroke", "black")
      .attr("stroke-width", 2);
    const callExit = callUpdate.exit().remove();

    callEnter.merge(callUpdate)
      .attr("x1", (d) => scaleX(d.start))
      .attr("x2", (d) => scaleX(d.end))
      .attr("y1", margin.top + 0)
      .attr("y2", margin.top + 10)
      .text((d, i) => d.id);
  }
  return { renderCalls };

}
async function cell_13(FileAttachment, display) {

  const adjacencyList = await FileAttachment("./data/adjacencyList.json").json();
  display(adjacencyList);
  return { adjacencyList };

}
function cell_14(md) {

  return (
    md`---

## Entities`
  )

}
async function cell_15(FileAttachment, display) {

  const entityLabelToIdDict = await FileAttachment("./data/entityLabelToIdDict.json").json();
  display(entityLabelToIdDict);
  return { entityLabelToIdDict };

}
function cell_16(entityLabelToIdDict) {

  const idToEntityLabelDict = {};
  for (const [label, id] of Object.entries(entityLabelToIdDict)) {
    idToEntityLabelDict[id] = label;
  }
  return { idToEntityLabelDict };

}
function cell_17(md) {

  return (
    md`---
## Calls
`
  )

}
async function cell_18(FileAttachment, display) {

  const groupToChartIdsDict = await FileAttachment("./data/groupToChartIdsDict.json").json();
  display(groupToChartIdsDict);
  const phonesChartData = await FileAttachment("./data/phonesChartData.json").json();
  display(phonesChartData);
  return { groupToChartIdsDict, phonesChartData };

}
function cell_19(md) {

  return (
    md`---
## Utils`
  )

}
function cell_20(Inputs, chart) {
  return (
    Inputs.button("Reset zoom", { reduce: chart.reset })
  )
}
function cell_21(Inputs) {
  return (
    Inputs.range([1, 20], { value: 10, step: 1, label: "Years" })
  )
}
function cell_22(Timeline, scaleX, margin) {
  return (
    Timeline(scaleX, margin, 240)
  )
}
function cell_23(d3, width, MS_PER_HOUR, renderCalls, zoomPlugin) {
  return (
    function Timeline(scaleX, margin, height = 240) {
      let axis = {};
      let nodes = {};

      let originalScaleX = scaleX.copy();

      const parts = ["yearly", "daily", "weekly", "grid", "yearlyGrid"];

      const findDensityConfig = (map, value) => {
        for (const [limit, config] of map) {
          if (value < limit) {
            return config;
          }
        }

        return [];
      };

      const ensureTimeFormat = (value = "") => {
        return typeof value !== "function" ? d3.utcFormat(value) : value;
      };

      axis["yearly"] = (parentNode, density) => {
        const densityMap = [
          [
            3,
            [
              d3.utcMonth,
              (d) => {
                const startOfTheYear =
                  d.getUTCMonth() === 0 && d.getUTCDate() === 1;
                const format = startOfTheYear ? "%Y â€“ %B" : "%B";

                return d3.utcFormat(format)(d);
              },
            ],
          ],
          [Infinity, [d3.utcYear, "%Y"]],
        ];

        let [interval, format] = findDensityConfig(densityMap, density);
        format = ensureTimeFormat(format);

        const el = parentNode
          .attr("transform", `translate(0,${margin.top - 48})`)
          .call(
            d3
              .axisTop(scaleX)
              .ticks(interval)
              .tickFormat(format)
              .tickSizeOuter(0)
          );

        el.select(".domain").remove();

        el.selectAll("text")
          .attr("y", 0)
          .attr("x", 6)
          .style("text-anchor", "start");

        el.selectAll("line").attr("y1", -7).attr("y2", 6);
      };

      axis["daily"] = (parentNode, density) => {
        const densityMap = [
          [1, [d3.utcDay, "%-d"]],
          [3, [d3.utcDay, ""]],
          [8, [d3.utcMonth, "%B"]],
          [13, [d3.utcMonth, "%b"]],
          [22, [d3.utcMonth, (d) => d3.utcFormat("%B")(d).charAt(0)]],
          [33, [d3.utcMonth.every(3), "Q%q"]],
          [Infinity, [d3.utcMonth.every(3), ""]],
        ];

        let [interval, format] = findDensityConfig(densityMap, density);
        format = ensureTimeFormat(format);

        const el = parentNode
          .attr("transform", `translate(0,${margin.top - 28})`)
          .call(
            d3
              .axisTop(scaleX)
              .ticks(interval)
              .tickFormat(format)
              .tickSizeOuter(0)
          );

        el.select(".domain").remove();

        el.selectAll("text")
          .attr("y", 0)
          .attr("x", 6)
          .style("text-anchor", "start");

        el.selectAll("line").attr("y1", -7).attr("y2", 0);
      };

      axis["weekly"] = (parentNode, density) => {
        const densityMap = [
          [10, [d3.utcMonday, (d) => +d3.utcFormat("%-V")(d)]],  // monday as first of week and zero based
          [33, [d3.utcMonday, ""]],
          [Infinity, [d3.utcMonday.every(4), ""]],
        ];

        let [interval, format] = findDensityConfig(densityMap, density);
        format = ensureTimeFormat(format);

        const el = parentNode
          .attr("transform", `translate(0,${margin.top - 8})`)
          .call(
            d3
              .axisTop(scaleX)
              .ticks(interval)
              .tickFormat(format)
              .tickSizeOuter(0)
          );

        el.select(".domain").remove();
        el.selectAll("line").style(
          "visibility",
          density > densityMap[0][0] ? "visible" : "hidden"
        );

        el.selectAll("text")
          .attr("y", 0)
          .attr("x", 6)
          .style("text-anchor", "start");

        el.selectAll("line").attr("y1", -7).attr("y2", 0);
      };

      axis["grid"] = (parentNode, density) => {
        const densityMap = [
          [1, [d3.utcDay]],
          [8, [d3.utcMonday]],
          [22, [d3.utcMonth]],
          [Infinity, [d3.utcMonth.every(3)]],
        ];

        const [interval] = findDensityConfig(densityMap, density);

        const el = parentNode
          .attr("transform", `translate(0,${margin.top})`)
          .call(d3.axisTop(scaleX).ticks(interval).tickSizeOuter(0));

        el.select(".domain").remove();
        el.selectAll("text").remove();

        el.selectAll("line")
          .attr("y1", 0)
          .attr("y2", height - margin.top - margin.bottom);
      };

      axis["yearlyGrid"] = (parentNode, density) => {
        const densityMap = [
          [3, [d3.utcMonth, "%B"]],
          [Infinity, [d3.utcYear, "%Y"]],
        ];

        let [interval, format] = findDensityConfig(densityMap, density);
        format = ensureTimeFormat(format);

        const el = parentNode
          .attr("transform", `translate(0,${margin.top})`)
          .call(
            d3
              .axisTop(scaleX)
              .ticks(interval)
              .tickFormat(format)
              .tickSizeOuter(0)
          );

        el.select(".domain").remove();
        el.selectAll("text").remove();

        el.selectAll("line")
          .attr("y1", 0)
          .attr("y2", height - margin.top - margin.bottom);
      };

      const setup = () => {
        const svg = d3.create("svg")
          .attr("width", width)
          .attr("height", height)
          .attr("viewBox", [0, 0, width, height])
          .classed("timeline", true)
          .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

        const element = svg.node();

        const rootNode = svg.append("g").classed("timeline-axis", true);

        parts.forEach((part) => {
          nodes[part] = rootNode.append("g").classed(part, true);
        });

        const update = () => {
          const density = Math.abs(scaleX.invert(0) - scaleX.invert(1)) / MS_PER_HOUR; // in pixels per hour

          parts.forEach((part) => {
            nodes[part].call(axis[part], density);
          });

          renderCalls(rootNode, scaleX);
        };

        const { zoom, reset } = zoomPlugin(svg,
          ({ transform }) => {
            scaleX = transform.rescaleX(originalScaleX);

            update();
          }
        );

        update();

        return {
          element,
          update,
          reset,
        };
      };

      return setup();
    }
  )
}
function cell_24(d3, zoomScaleExtent, margin, width) {

  function zoomPlugin(svg, zoomed) {
    const zoom = d3.zoom()
      .scaleExtent(zoomScaleExtent)
      .extent([[margin.left, 0], [width - margin.right, 0]])
      .translateExtent([
        [margin.left, 0],
        [width - margin.right, 0]
      ])
      .filter(filter)
      .on("zoom", zoomed);

    svg.call(zoom);

    function reset() {
      svg.transition()
        .duration(750)
        .call(zoom.transform, d3.zoomIdentity);
    }

    // prevent scrolling then apply the default filter
    function filter(event) {
      event.preventDefault();
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }

    return {
      zoom,
      reset
    };
  }
  return { zoomPlugin };

}
function cell_25(callRange, d3, margin, width) {

  function getDate(date) {
    return new Date(date.toISOString().split('T')[0]);
  }

  const now = callRange.start;
  const until = callRange.end;

  const nowDate = new Date(callRange.start.getUTCFullYear(), 0, 1);
  const untilDate = new Date(callRange.end.getUTCFullYear(), 11, 31);

  const scaleX = d3.scaleUtc().domain([nowDate, untilDate]).range([margin.left, width - margin.right]);
  return { getDate, now, until, nowDate, untilDate, scaleX };

}
function cell_26(scaleX) {
  return (
    scaleX.domain()
  )
}
function cell_27(MS_PER_DAY) {

  function getDays(a, b) { return Math.abs(a - b) / MS_PER_DAY; }
  return { getDays };

}
function cell_28(getDays, scaleX) {
  return (
    getDays(...scaleX.domain())
  )
}
function cell_29(days) {
  return (
    [1, Math.round(days)]
  )
}
function cell_31(MS_PER_HOUR) {
  return (
    24 * MS_PER_HOUR
  )
}
function cell_32() {
  return (
    60 * 60 * 1000
  )
}
function cell_33(MS_PER_DAY) {
  return (
    365.24 * MS_PER_DAY
  )
}
function cell_34(html) {
  return (
    html`
<style type="text/css">
  .timeline {
    --background-color: #334155;
    --daily-gridline-color: #cbd5e1;
    --yearly-gridline-color: #e2e8f0;
    --yearly-tick-color: #e2e8f0;
    --yearly-label-color: #f8fafc;
    --daily-tick-color: #e2e8f0;
    --daily-label-color: #f8fafc;
    --weekly-tick-color: #e2e8f0;
    --weekly-label-color: #f8fafc;

    background-color: var(--background-color);
    border-radius: 0.25rem;
  }

  .calls-layer line.call-line {
    stroke: #38bdf8;
    stroke-width: 2;
    stroke-linecap: round;
    opacity: 0.9;
  }
  .calls-layer circle {
    fill: #f472b6;
    stroke: #0f172a;
    stroke-width: 1;
  }
  .calls-layer g.call:hover line.call-line {
    stroke: #fbbf24;
  }
  .calls-layer g.call:hover circle {
    fill: #fbbf24;
  }

  .timeline-axis line {
    shape-rendering: geometricPrecision;
    stroke-width: 0.5;
  }

  .timeline-axis .yearly line {
    stroke: var(--yearly-tick-color);
  }

  .timeline-axis .yearly text {
    color: var(--yearly-label-color);
  }

  .timeline-axis .daily line {
    stroke: var(--daily-tick-color);
  }

  .timeline-axis .daily text {
    color: var(--daily-label-color);
  }

  .timeline-axis .weekly line {
    stroke: var(--weekly-tick-color);
  }

  .timeline-axis .weekly text {
    color: var(--weekly-label-color);
  }

  .timeline-axis .grid line {
    stroke: var(--daily-gridline-color);
  }

  .timeline-axis .yearlyGrid line {
    stroke: var(--yearly-gridline-color);
  }
</style>
`
  )
}
const compiled = [
  {
    "id": 1,
    "mode": "md",
    "pinned": false,
    "hidden": false,
    "body": cell_1,
    "inputs": [
      "md"
    ],
    "outputs": [],
    "autodisplay": true,
    "autoview": false
  },
  {
    "id": 2,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_2,
    "inputs": [
      "Plot",
      "data",
      "setStartEnd",
      "d3"
    ],
    "outputs": [],
    "autodisplay": true
  },
  {
    "id": 3,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_3,
    "inputs": [
      "Mutable"
    ],
    "outputs": [
      "startEnd",
      "setStartEnd"
    ],
    "autodisplay": false
  },
  {
    "id": 4,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_4,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "data"
    ],
    "autodisplay": false
  },
  {
    "id": 5,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_5,
    "inputs": [
      "phonesTimeLineData",
      "display"
    ],
    "outputs": [
      "calls",
      "callRange"
    ],
    "autodisplay": false
  },
  {
    "id": 6,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_6,
    "inputs": [
      "display"
    ],
    "outputs": [
      "test",
      "xxx"
    ],
    "autodisplay": false
  },
  {
    "id": 7,
    "mode": "md",
    "pinned": false,
    "hidden": false,
    "body": cell_7,
    "inputs": [
      "md"
    ],
    "outputs": [],
    "autodisplay": true,
    "autoview": false
  },
  {
    "id": 8,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_8,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "phonesTimeLineData"
    ],
    "autodisplay": false
  },
  {
    "id": 9,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_9,
    "inputs": [
      "md",
      "callRange"
    ],
    "outputs": [],
    "autodisplay": true
  },
  {
    "id": 10,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_10,
    "inputs": [
      "chart"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 11,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_11,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "timeBarData"
    ],
    "autodisplay": false
  },
  {
    "id": 12,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_12,
    "inputs": [
      "calls",
      "margin"
    ],
    "outputs": [
      "renderCalls"
    ],
    "autodisplay": false
  },
  {
    "id": 13,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_13,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "adjacencyList"
    ],
    "autodisplay": false
  },
  {
    "id": 14,
    "mode": "md",
    "pinned": false,
    "hidden": false,
    "body": cell_14,
    "inputs": [
      "md"
    ],
    "outputs": [],
    "autodisplay": true,
    "autoview": false
  },
  {
    "id": 15,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_15,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "entityLabelToIdDict"
    ],
    "autodisplay": false
  },
  {
    "id": 16,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_16,
    "inputs": [
      "entityLabelToIdDict"
    ],
    "outputs": [
      "idToEntityLabelDict"
    ],
    "autodisplay": false
  },
  {
    "id": 17,
    "mode": "md",
    "pinned": false,
    "hidden": false,
    "body": cell_17,
    "inputs": [
      "md"
    ],
    "outputs": [],
    "autodisplay": true,
    "autoview": false
  },
  {
    "id": 18,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_18,
    "inputs": [
      "FileAttachment",
      "display"
    ],
    "outputs": [
      "groupToChartIdsDict",
      "phonesChartData"
    ],
    "autodisplay": false
  },
  {
    "id": 19,
    "mode": "md",
    "pinned": false,
    "hidden": false,
    "body": cell_19,
    "inputs": [
      "md"
    ],
    "outputs": [],
    "autodisplay": true,
    "autoview": false
  },
  {
    "id": 20,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_20,
    "inputs": [
      "Inputs",
      "chart"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 21,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_21,
    "inputs": [
      "Inputs"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 22,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_22,
    "inputs": [
      "Timeline",
      "scaleX",
      "margin"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 23,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_23,
    "inputs": [
      "d3",
      "width",
      "MS_PER_HOUR",
      "renderCalls",
      "zoomPlugin"
    ],
    "output": "Timeline",
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 24,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_24,
    "inputs": [
      "d3",
      "zoomScaleExtent",
      "margin",
      "width"
    ],
    "outputs": [
      "zoomPlugin"
    ],
    "autodisplay": false
  },
  {
    "id": 25,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_25,
    "inputs": [
      "callRange",
      "d3",
      "margin",
      "width"
    ],
    "outputs": [
      "getDate",
      "now",
      "until",
      "nowDate",
      "untilDate",
      "scaleX"
    ],
    "autodisplay": false
  },
  {
    "id": 26,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_26,
    "inputs": [
      "scaleX"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 27,
    "mode": "js",
    "pinned": false,
    "hidden": false,
    "body": cell_27,
    "inputs": [
      "MS_PER_DAY"
    ],
    "outputs": [
      "getDays"
    ],
    "autodisplay": false
  },
  {
    "id": 28,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_28,
    "inputs": [
      "getDays",
      "scaleX"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 29,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_29,
    "inputs": [
      "days"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 31,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_31,
    "inputs": [
      "MS_PER_HOUR"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 32,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_32,
    "inputs": [],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 33,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_33,
    "inputs": [
      "MS_PER_DAY"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  },
  {
    "id": 34,
    "mode": "ojs",
    "pinned": false,
    "hidden": false,
    "body": cell_34,
    "inputs": [
      "html"
    ],
    "autodisplay": true,
    "automutable": false,
    "autoview": false
  }
];
export default compiled;
